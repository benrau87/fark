
# This file contains filters, transforms, and enrichments for milter-greylist messages


filter {
    if "process_syslog" in [tags] {
        if [syslog_program] == "milter-greylist" {
            grok {
                # t2ALS3rj016380: skipping greylist because address 1.2.3.4 is whitelisted, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 180
                # t2ALZsnw019147: skipping greylist because sender is SPF-compliant, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 192
                # t2ALnwej024858: skipping greylist because sender <user1@host.tld> is whitelisted, (from=<user1@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 175
                # t2ALicGZ021704: skipping greylist because recipient <user2@host.tld> is whitelisted, (from=<user@host.tld>, rcpt=<user2@host.tld>, addr=remote.hostname.tld[1.2.3.4]) ACL 177
                patterns_dir => "/usr/local/sof-elk/grok-patterns"
                match => [ "message", "^%{WORD:smtp_qid}: skipping greylist because %{GREEDYDATA:gl_skipreason}, \(%{GREEDYDATA:smtp_remainder}\) ACL %{INT:gl_acl}" ]

                add_tag => [ "parse_done", "got_greylist_wl" ]
                tag_on_failure => [ "gpfail_gl1" ]
            }

            if !("parse_done" in [tags]) {
                grok {
                    # t2ALh2Bv021403: addr remote.hostname.tld[1.2.3.4] from <user1@host.tld> to <user2@host.tld> delayed for 00:15:00 (ACL 190)
                    patterns_dir => "/usr/local/sof-elk/grok-patterns"
                    match => [ "message", "^%{NOTCOLON:smtp_qid}: addr \[?%{IPORHOST:gl_host}\]?\[%{IP:gl_srcip}\] from <%{EMAILADDRESS:gl_from}> to <%{EMAILADDRESS:gl_to}> delayed for %{HMS:gl_delaytime} \(ACL %{INT:gl_acl}\)" ]

                    add_tag => [ "parse_done", "got_greylist_delay" ]
                    tag_on_failure => [ "gpfail_gl2" ]
                }
            }

            if !("parse_done" in [tags]) {
                grok {
                    # t2AKFcYV005465: addr 1.2.3.4 from <user1@host.tld> rcpt <user2@host.tld>: autowhitelisted for another 48:00:00
                    patterns_dir => "/usr/local/sof-elk/grok-patterns"
                    match => [ "message", "^%{NOTCOLON:smtp_qid}: addr %{IP:gl_srcip} from <%{EMAILADDRESS:gl_from}> rcpt <%{EMAILADDRESS:gl_to}>: autowhitelisted for another %{HMS:gl_allowtime}" ]

                    add_tag => [ "parse_done", "got_greylist_auto_wl" ]
                    tag_on_failure => [ "gpfail_gl3" ]
                }
            }

            if !("parse_done" in [tags]) {
                grok {
                    # User user2@host.tld authenticated, bypassing greylisting
                    patterns_dir => "/usr/local/sof-elk/grok-patterns"
                    match => [ "message", "^User %{EMAILADDRESS:gl_sender} authenticated, bypassing greylisting" ]

                    add_tag => [ "parse_done", "got_greylist_auth" ]
                    tag_on_failure => [ "gpfail_gl4" ]
                }
            }

            # remove "gpfail_gl*" tags if "parse_done" tag also present
            if "parse_done" in [tags] {
                mutate {
                    remove_tag => [ "gpfail_gl1", "gpfail_gl2", "gpfail_gl3", "gpfail_gl4" ]
                }
            }

            # parse smtp_remainder if present
            if [smtp_remainder] {
                kv {
                    prefix => "gl_"
                    trim => "<>"
                    field_split => ","
                    trimkey => " ()"
                }

                # should only have gl_from, gl_rcpt, gl_addr fields
                if [gl_addr] {
                    grok {
                        patterns_dir => "/usr/local/sof-elk/grok-patterns"
                        match => [ "message", "%{HOSTNAME:gl_host}\[%{IP:gl_srcip}\]" ]
                        tag_on_failure => [ "gpfail_gl5" ]
                    }
                    mutate {
                        remove_field => [ "gl_addr" ]
                    }
                }
                mutate {
                    remove_field => [ "smtp_remainder" ]
                }
            }

            # if the gl_host and gl_srcip fields are the same, remove gl_host
            if [gl_host] == [gl_srcip] {
                mutate {
                    remove_field => [ "gl_host" ]
                }
            }

            # handle IPs and populate [ips] list
            if [gl_srcip] {
                geoip {
                    database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
                    source => "[gl_srcip]"
                    target => "[gl_srcgeo]"
                }
                geoip {
                    database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
                    source => "[gl_srcip]"
                    target => "[gl_srcgeo]"
                }

                mutate {
                    add_field => { "ips" => "%{gl_srcip}" }
                }
            }
        }
    }
}
