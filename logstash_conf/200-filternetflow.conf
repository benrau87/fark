
# This file contains filters, transforms, and enrichments for NetFlow records

filter {
    if [type] == "archive-netflow" {
        grok {
            patterns_dir => "/usr/local/sof-elk/grok-patterns"
            match => [ "message", "%{IPORHOST:netflowhost}%{SPACE}%{NONNEGINT:dst_as:int}%{SPACE}%{NONNEGINT:dst_mask:int}%{SPACE}%{NONNEGINT:engine_type:int}/%{NONNEGINT:engine_id:int}%{SPACE}%{TIMESTAMP_NETFLOW:first_switched_raw}%{SPACE}%{NONNEGINT:flow_records}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:in_bytes}%{SPACE}%{NONNEGINT:in_pkts}%{SPACE}%{NONNEGINT:input_snmp:int}%{SPACE}%{IPV4:ipv4_dst_ip}%{SPACE}%{IPV4:ipv4_next_hop_ip}%{SPACE}%{IPV4:ipv4_src_ip}%{SPACE}(%{ICMP_TYPECODE}|%{NONNEGINT:l4_dst_port:int})%{SPACE}%{NONNEGINT:l4_src_port:int}%{SPACE}%{TIMESTAMP_NETFLOW:last_switched_raw}%{SPACE}%{NONNEGINT:output_snmp:int}%{SPACE}%{WORD:protocol}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:src_as:int}%{SPACE}%{NONNEGINT:src_mask:int}%{SPACE}%{NONNEGINT:src_tos:int}%{SPACE}%{NOTSPACE:tcp_aflags}%{SPACE}%{NONNEGINT:version:int}" ]
            remove_field => [ "message", "MSECOND" ]
        }
        mutate {
            replace => [ "host", "%{netflowhost}" ]
        }
        mutate {
            remove_field => [ "netflowhost", "path" ]
        }
    }

    if [type] == "archive-netflow" {
        # use the flow start timestamp for the event timestamp
        ##  2014-05-11 16:25:11.841 (archived from nfdump)
        date {
            match => [ "first_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
        }

        mutate {
            add_field => {
                "[nf][dst_as]" => "%{dst_as}"
                "[nf][dst_mask]" => "%{dst_mask}"
                "[nf][engine_type]" => "%{engine_type}"
                "[nf][engine_id]" => "%{engine_id}"
                "[nf][flow_records]" => "%{flow_records}"
                "[nf][in_bytes]" => "%{in_bytes}"
                "[nf][in_pkts]" => "%{in_pkts}"
                "[nf][input_snmp]" => "%{input_snmp}"
                "[nf][ipv4_dst_ip]" => "%{ipv4_dst_ip}"
                "[nf][ipv4_next_hop_ip]" => "%{ipv4_next_hop_ip}"
                "[nf][ipv4_src_ip]" => "%{ipv4_src_ip}"
                "[nf][l4_dst_port]" => "%{l4_dst_port}"
                "[nf][l4_src_port]" => "%{l4_src_port}"
                "[nf][output_snmp]" => "%{output_snmp}"
                "[nf][protocol]" => "%{protocol}"
                "[nf][src_as]" => "%{src_as}"
                "[nf][src_mask]" => "%{src_mask}"
                "[nf][src_tos]" => "%{src_tos}"
                "[nf][tcp_aflags]" => "%{tcp_aflags}"
                "[nf][version]" => "%{version}"
            }
        }

        mutate {
            remove_field => [ "dst_as", "dst_mask", "engine_type", "engine_id", "flow_records", "in_bytes", "in_pkts", "input_snmp", "ipv4_dst_ip", "ipv4_next_hop_ip", "ipv4_src_ip", "l4_dst_port", "l4_src_port", "output_snmp", "protocol", "src_as", "src_mask", "src_tos", "tcp_aflags", "version" ]
        }

## attempting to unify timestamp formats between live and archive
        date {
            match => [ "first_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
            target => "[nf][first_switched]"
        }
        date {
            match => [ "last_switched_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
            target => "[nf][last_switched]"
        }
        mutate {
            remove_field => [ "first_switched_raw", "last_switched_raw" ]
        }
## end datestamp unification attempt
    }

    if [type] == "netflow" {
        # use the flow start timestamp for the event timestamp
        ##  2014-10-14T00:41:56.999Z (live netflow)
        date {
            match => [ "[nf][first_switched]", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
        }

        if [nf][tcp_flags] and [nf][tcp_flags] > 63 {
            ruby {
                code => "event['nf']['tcp_aflags'] = '0x%x' % event['nf']['tcp_flags']"
                remove_field => [ "[nf][tcp_flags]" ]
            }
        } else if [nf][tcp_flags] {
            ruby {
                code => "event['nf']['tcp_aflags'] = '......'; event['nf']['tcp_aflags'][0] = (event['nf']['tcp_flags'] & 32 == 32) ? 'U' : '.'; event['nf']['tcp_aflags'][1] = (event['nf']['tcp_flags'] & 16 == 16) ? 'A' : '.'; event['nf']['tcp_aflags'][2] = (event['nf']['tcp_flags'] &  8 == 8)  ? 'P' : '.'; event['nf']['tcp_aflags'][3] = (event['nf']['tcp_flags'] &  4 == 4)  ? 'R' : '.'; event['nf']['tcp_aflags'][4] = (event['nf']['tcp_flags'] &  2 == 2)  ? 'S' : '.'; event['nf']['tcp_aflags'][5] = (event['nf']['tcp_flags'] &  1 == 1)  ? 'F' : '.';"
                remove_field => [ "[nf][tcp_flags]" ]
            }
        }
    }

    if [type] == "netflow" {
### rename some fields to better allow ES dynamic mappings
      mutate {
        rename => {
            "[nf][ipv4_src_addr]" => "[nf][ipv4_src_ip]"
            "[nf][ipv4_dst_addr]" => "[nf][ipv4_dst_ip]"
            "[nf][ipv4_next_hop]" => "[nf][ipv4_next_hop_ip]"
        }
      }
    }

    if [type] == "netflow" or [type] == "archive-netflow" {
        # replace the numerical protocol number with a text equivalent
        translate {
            dictionary_path => "/usr/local/sof-elk/lib/ip_proto_lookup.yaml"
            field => "[nf][protocol]"
            destination => "[nf][aproto]"
        }

        if [nf][in_bytes] {
            mutate {
                convert => [ "[nf][in_bytes]", "integer" ]
            }
        }
        if [nf][flow_records] {
            mutate {
                convert => [ "[nf][flow_records]", "integer" ]
            }
        }
        if [nf][in_pkts] {
            mutate {
                convert => [ "[nf][in_pkts]", "integer" ]
            }
        }

        mutate {
            add_field => { "path" => "NetFlow from %{host}" }

            # geoip needs IP to be a string, not an ip
            convert => [ "[nf][ipv4_src_ip]", "string" ]
            convert => [ "[nf][ipv4_dst_ip]", "string" ]
        }

        geoip {
            database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
            source => "[nf][ipv4_src_ip]"
            target => "[nf][ipv4_src_geo]"
        }
        geoip {
            database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
            source => "[nf][ipv4_src_ip]"
            target => "[nf][ipv4_src_geo]"
        }
        if [nf][ipv4_src_geo][number] and [nf][ipv4_src_geo][asn] {
            mutate {
                add_field => { "[nf][ipv4_src_geo][asnstr]" => "%{[nf][ipv4_src_geo][number]}: %{[nf][ipv4_src_geo][asn]}" }
            }
        }
        if [nf][ipv4_src_geo][number] and [nf][src_as] == 0 {
            mutate {
                replace => [ "[nf][src_as]", "%{[nf][ipv4_src_geo][number]}" ]
            }
            mutate {
                gsub => [ "[nf][src_as]", "^AS", "" ]
            }
            mutate {
                convert => [ "[nf][src_as]", "integer" ]
            }
        }
        if [nf][ipv4_src_geo][ip] {
            mutate {
                remove_field => [ "[nf][ipv4_src_geo][ip]" ]
            }
        }

        geoip {
            database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
            source => "[nf][ipv4_dst_ip]"
            target => "[nf][ipv4_dst_geo]"
        }
        geoip {
            database => "/usr/local/share/GeoIP/GeoLiteCity.dat"
            source => "[nf][ipv4_dst_ip]"
            target => "[nf][ipv4_dst_geo]"
        }
        if [nf][ipv4_dst_geo][number] and [nf][ipv4_dst_geo][asn] {
            mutate {
                add_field => { "[nf][ipv4_dst_geo][asnstr]" => "%{[nf][ipv4_dst_geo][number]}: %{[nf][ipv4_dst_geo][asn]}" }
            }
        }
        if [nf][ipv4_dst_geo][number] and [nf][dst_as] == 0 {
            mutate {
                replace => [ "[nf][dst_as]", "%{[nf][ipv4_dst_geo][number]}" ]
            }
            mutate {
                gsub => [ "[nf][dst_as]", "^AS", "" ]
            }
            mutate {
                convert => [ "[nf][dst_as]", "integer" ]
            }
        }
        if [nf][ipv4_dst_geo][ip] {
            mutate {
                remove_field => [ "[nf][ipv4_dst_geo][ip]" ]
            }
        }

        mutate {
            add_field => {
                "ips" => [ "%{[nf][ipv4_src_ip]}", "%{[nf][ipv4_dst_ip]}" ]
            }
        }
    }

    if [type] == "archive-netflow" {
        if [nf][aproto] == "ICMP" {
            mutate {
                replace => [ "[nf][l4_src_port]", "%{icmp_type}" ]
            }
            mutate {
                replace => [ "[nf][l4_dst_port]", "%{icmp_code}" ]
            }
            mutate {
                remove_field => [ "icmp_type", "icmp_code" ]
            }
        }
    }
}
